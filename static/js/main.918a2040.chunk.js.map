{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/ContactFilter/ContactFilter.jsx","helpers/helpers.js","App.js","index.js"],"names":["ContactForm","props","handleNameInput","handleNumberInput","addContact","name","number","onSubmit","className","htmlFor","id","type","value","pattern","title","required","onChange","ContactListItem","contact","removeContact","onClick","ContactList","contacts","map","ContactFilter","filter","handleFilterName","ciEquals","a","b","localeCompare","undefined","sensitivity","App","state","onFilterName","event","setState","target","prevState","uuid","some","element","alert","e","filterContacts","normalizedFilter","toLowerCase","includes","storedContacts","JSON","parse","localStorage","getItem","this","prevProps","currentContacts","setItem","stringify","filteredContacts","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.918a2040.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ContactForm = (props) => {\r\n  const { handleNameInput, handleNumberInput, addContact, name, number } = props;\r\n  return (\r\n    <form onSubmit={addContact}>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleNameInput}\r\n          \r\n        />\r\n      </div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"number\" className=\"form-label\">Number</label>\r\n        <input\r\n          className=\"form-control\"\r\n          id=\"number\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleNumberInput}\r\n        />\r\n      </div>    \r\n      <input type=\"submit\" value=\"Add contact\" className=\"btn btn-primary\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;","import React from 'react'\r\n\r\nfunction ContactListItem({ contact, removeContact }) {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <p>{contact.name} : {contact.number}</p>\r\n      <button className=\"btn btn-danger btn-sm\" onClick={() => removeContact(contact.id)}>Delete</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default ContactListItem;","import React from \"react\";\r\nimport ContactListItem from \"./ContactListItem\";\r\n\r\nconst ContactList = ({ contacts, removeContact }) => {\r\n  return (\r\n    <ul className=\"list-group list-group-flush\">\r\n      {contacts.map((contact) => (\r\n        <ContactListItem\r\n          key={contact.id}\r\n          contact={contact}\r\n          removeContact={removeContact}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react'\r\n\r\nconst ContactFilter = ({ filter, handleFilterName }) => {\r\n  return (\r\n    <div className=\"mb-3\">\r\n          <label htmlFor=\"filter\" className=\"form-label\">Find contacts by name</label>\r\n          <input\r\n            className=\"form-control\"\r\n          id=\"filter\"\r\n          type=\"text\"\r\n          name=\"filter-name\"\r\n          value={ filter }\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={ handleFilterName }\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactFilter;\r\n","export function ciEquals(a, b) {\n  return typeof a === \"string\" && typeof b === \"string\"\n    ? a.localeCompare(b, undefined, { sensitivity: \"accent\" }) === 0\n    : a === b;\n}\n","import { React, Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\n\nimport \"./index.scss\";\nimport \"./App.scss\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport ContactFilter from \"./components/ContactFilter/ContactFilter\";\nimport { ciEquals } from \"./helpers/helpers\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const storedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n\n    storedContacts && this.setState({ contacts: storedContacts });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const currentContacts = this.state.contacts;\n\n    currentContacts !== prevState.contacts &&\n      localStorage.setItem(\"contacts\", JSON.stringify(currentContacts));\n  }\n\n  onFilterName = (event) => {\n    this.setState({ filter: event.target.value });\n  };\n\n  addContact = ({ name, number }) => {\n    this.setState((prevState) => {\n      const contact = {\n        id: uuid(),\n        name,\n        number,\n      };\n\n      if (\n        prevState.contacts.some((element) =>\n          ciEquals(element.name, contact.name)\n        )\n      ) {\n        alert(`${contact.name} is already in contacts`);\n        return;\n      }\n\n      return {\n        contacts: [...prevState.contacts, contact],\n        filter: \"\",\n      };\n    });\n  };\n\n  removeContact = (id) => {\n    alert(\"Вы собираетесь удалить елемент с ID: \" + id);\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter((e) => e.id !== id),\n        filter: \"\",\n      };\n    });\n  };\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const filteredContacts = this.filterContacts();\n    const { filter } = this.state;\n    return (\n      <div className=\"container\">\n        <div>\n          <h2 className=\"h2\">Phonebook</h2>\n          <ContactForm onSubmit={this.addContact} />\n        </div>\n        <div>\n          <h2 className=\"h2\">Contacts</h2>\n          <ContactFilter handleFilterName={this.onFilterName} filter={filter} />\n          <ContactList\n            contacts={filteredContacts}\n            removeContact={this.removeContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"bootstrap/scss/bootstrap.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}